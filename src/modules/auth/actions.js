export const SIGNUP_EMAIL = 'SIGNUP_EMAIL';
export const LOGIN_EMAIL = 'LOGIN_EMAIL';
export const LOGIN_GOOGLE = 'LOGIN_GOOGLE';
export const LOGIN_OAUTH = 'LOGIN_OAUTH';
export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';
export const LOGOUT = 'LOGOUT';
export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';
export const AUTH_FAILURE = 'AUTH_FAILURE';

/**
 * Creates an action of type SIGNUP_EMAIL that signals the intention to sign up
 * with the specified email and password.
 * Handled by authSagas.
 * @param  {string} email    Email address to use for the signup
 * @param  {string} password Password to use for the signup
 * @param  {string} redirect Path of the route that should be opened when the signup
 *                           is successful. Default: /dashboard
 * @return object            A FSA-compliant action, the payload contains email,
 *                           password and redirect
 */
export const signupEmail = (email, password, redirect='/dashboard') => ({
    type: SIGNUP_EMAIL,
    payload: {email, password, redirect}
})


/**
 * Creates an action of type LOGIN_EMAIL that signals the intention to login
 * with the specified email and password.
 * Handled by authSagas.
 * @param  {string} email    Email address to use for the login
 * @param  {string} password Password to use for the login
 * @param  {string} redirect Path of the route that should be opened when the login
 *                           is successful. Default: /dashboard
 * @return object            A FSA-compliant action, the payload contains email,
 *                           password and redirect
 */
export const loginEmail = (email, password, redirect='/dashboard') => ({
    type: LOGIN_EMAIL,
    payload: {email, password, redirect}
})


/**
 * Creates an action of type LOGIN_GOOGLE that signals the intention to login
 * with google oauth.
 * Handled by authSagas.
 * @param  {string} redirect Path of the route that should be opened when the login
 *                           is successful. Default: /dashboard
 * @return object            A FSA-compliant action, the payload contains the
 *                           redirect
 */
export const loginGoogle = (redirect='/dashboard') => ({
    type: LOGIN_GOOGLE,
    payload: {redirect}
})

/**
 * Creates an action of type LOGIN_SUCCESS, meaning that a login attempt has
 * succeded and we have access to the user data.
 * Dispatched by authSagas.
 * Handled by authReducer.
 * @param  {object} userData An object containing the user data. This is the
 *                           object returned by firebase on a successful login
 * @return object            A FSA-compliant action, the payload contains the
 *                           user data
 */
export const loginSuccess = (userData) => ({
    type: LOGIN_SUCCESS,
    payload: userData
})

/**
 * Creates an action of type LOGOUT that signals the intention to logout from
 * the current session.
 * Handled by authSagas.
 * @return object            A FSA-compliant action with no payload
 */
export const logout = () => ({
    type: LOGOUT
})

/**
 * Creates an action of type LOGOUT_SUCCESS, meaning that a logout attempt has
 * succeded and we have to clear the user data.
 * Dispatched by authSagas.
 * Handled by authReducer.
 * @return object            A FSA-compliant action with no payload
 */
export const logoutSuccess = () => ({
    type: LOGOUT_SUCCESS
})

/**
 * Creates an action of type AUTH_FAILURE, meaning that a login, logout or signup
 * have failed and generated an error.
 * Dispatched by authSagas.
 * Handled by authReducer.
 * @param  {string|object} err   The error generated by the failed auth action
 * @return object            A FSA-compliant action, the payload contains the
 *                           error and the error property is set to true
 */
export const authFailure = (err) => ({
    type: AUTH_FAILURE,
    payload: err,
    error: true
})
